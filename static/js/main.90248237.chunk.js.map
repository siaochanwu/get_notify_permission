{"version":3,"sources":["FirebaseInit.js","Notification.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","db","firestore","userRef","collection","getToken","setTokenFound","a","currentToken","vapidKey","console","log","id","split","doc","set","then","docRef","catch","error","Notification","props","useState","isTokenFound","useEffect","data","tokenFunc","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAaAA,IAASC,cATY,CACjBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iBAInB,IAAMO,EAAYV,IAASU,YACrBC,EAAKX,IAASY,YAGdC,EAAUF,EAAGG,WAAW,OAEjBC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAChBC,EAAe,GADC,kBAGKR,EAAUK,SAAS,CAACI,SAN/BhB,4FAGM,QAGhBe,EAHgB,SAKZE,QAAQC,IAAIH,GACRI,EAAKJ,EAAaK,MAAM,KAAK,GAC7BV,EACCW,IAAIF,GACJG,IAAI,CAAC,MAASP,IACdQ,MAAK,SAASC,GACXP,QAAQC,IAAI,6BAA8BM,MAE7CC,OAAM,SAASC,GACZT,QAAQS,MAAM,0BAA2BA,MAE7Cb,GAAc,KAElBI,QAAQC,IAAI,qBACZL,GAAc,IAnBF,gDAsBlBI,QAAQC,IAAI,4CAAZ,MAtBkB,iCAwBbH,GAxBa,yDAAH,sD,eCCNY,EAnBM,SAACC,GAClB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAqBjB,EAArB,KAcA,OAZAI,QAAQC,IAAI,eAAgBY,GAE5BC,qBAAU,WACN,IAAIC,EADQ,4CAEZ,sBAAAlB,EAAA,sEACiBF,EAASC,GAD1B,QACImB,EADJ,SAGQf,QAAQC,IAAI,aAAcc,GAHlC,4CAFY,0DAQZC,KACD,CAACpB,IAECiB,EAAe,gDAAwB,wDCHjCI,MAXf,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,uCACA,kEACA,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.90248237.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/messaging'\r\nimport \"firebase/firestore\"\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_apiKey,\r\n    authDomain: process.env.REACT_APP_authDomain,\r\n    projectId: process.env.REACT_APP_projectId,\r\n    storageBucket: process.env.REACT_APP_storageBucket,\r\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\r\n    appId: process.env.REACT_APP_appId,\r\n    measurementId: process.env.REACT_APP_measurementId\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst messaging = firebase.messaging();\r\nconst db = firebase.firestore();\r\n\r\nconst publicKey = process.env.REACT_APP_VAPID_KEY;\r\nconst userRef = db.collection('fcm');\r\n\r\nexport const getToken = async (setTokenFound) => {\r\n    let currentToken = '';\r\n    try {\r\n        currentToken = await messaging.getToken({vapidKey: publicKey});\r\n        if (currentToken) {\r\n            console.log(currentToken)\r\n            var id = currentToken.split('-')[0]\r\n                userRef\r\n                .doc(id)\r\n                .set({'token': currentToken})\r\n                .then(function(docRef) {\r\n                    console.log(\"Document written with ID: \", docRef);\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error adding document: \", error);\r\n                });\r\n                setTokenFound(true);\r\n        } else {\r\n            console.log('error in getToken')\r\n            setTokenFound(false);\r\n        }\r\n    } catch (error) {\r\n      console.log('An error occurred while retrieving token.', error);\r\n    }\r\n    return currentToken;\r\n  };\r\n","import React, {useState, useEffect} from \"react\"\r\nimport { getToken } from \"./FirebaseInit\";\r\n\r\nconst Notification = (props) => {\r\n    const [isTokenFound, setTokenFound] = useState(false)\r\n\r\n    console.log('token found:', isTokenFound)\r\n\r\n    useEffect(() => {\r\n        let data;\r\n        async function tokenFunc() {\r\n            data = await getToken(setTokenFound)\r\n            if(data) {\r\n                console.log('token is: ', data)\r\n            }\r\n        } \r\n        tokenFunc()\r\n    }, [setTokenFound]);\r\n    return (\r\n        (isTokenFound ? <p>Get Token Done!</p>: <p>Fail to Get Permission</p> )\r\n    )\r\n}\r\nexport default Notification;","import React from 'react';\nimport './App.css';\nimport './FirebaseInit';\nimport Notification from './Notification'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>HOLA!</h1>\n      <p>YOU WILL GET THE SPECIAL MESSAGE!</p>\n      <Notification></Notification>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}